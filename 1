/* Project2.cpp
 * Nivedha Ravi nr9475
 * EE312, Summer 2017
 * Project 2, Matrix Multiplication
 */

#include <stdio.h>
#include <stdint.h>
#include "MatrixMultiply.h"
#include <assert.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
void freeMemory(double** ptr, int length) {
    for(int i =0; i < length ; i++) {
        free(*(ptr + i));
    }
    free(ptr);
}

void multiplyMatrices(
        double a[],
        const uint32_t a_rows,
        const uint32_t a_cols,
        double b[],
        const uint32_t b_cols,
        double c[]) {
    uint32_t  i= 0;
    double sum = 0;
    if (a_rows == 0 || a_cols == 0 || b_cols == 0){
        c[0] = 0;
    }
    while(i<a_rows){
        uint32_t j = 0;
        while ( j < b_cols){
            uint32_t k = 0;
            while(k<a_cols){
                sum  = sum +(a[(i*a_cols)+k]*b[(k*b_cols)+j]);
                k++;
            }
            c[(i*b_cols)+j] = sum;
            sum = 0;
            j++;
        }
        i++;
    }

}

//*****************************************
//create matrix function to make sure none of the parameters passed in a 0
double ** createMatrix(const uint32_t a_rows,
                       const uint32_t a_cols) {
    double** c = (double**)malloc(a_rows*sizeof(double*));
    if (c == NULL) {
        return NULL; // if the pointer to the matrix is null
    }

    for (uint32_t x =0 ; x < a_rows; x++){
        double* rows = (double*)malloc(a_cols*sizeof(double));
        if (rows == NULL) {
            printf("malloc failed with creating row %d\n", a_rows); //if any of the given pointers is a null pointer
            freeMemory(c, a_rows-1);
            return NULL;
        }
        c[x] = rows;
    }
    return c;
}
//***************************************

double** multiplyMatricesPtr(
        double** a,
        const uint32_t a_rows,
        const uint32_t a_cols,
        double** b,
        const uint32_t b_cols) {
    if (a_rows == 0 || a_cols == 0 || b_cols == 0) {
        return NULL;
    }

    double** c = createMatrix(a_rows, b_cols);
    if (c==NULL){
        return NULL;
    }


    //iterate through matrix and place appropriate values
    uint32_t i = 0 ;
    uint32_t e  = 0;
    uint32_t k = 0;
    for (i = 0; i < a_rows; i++) {
        for (e = 0; e < b_cols; e++) {
            c[i][e] = 0.0; //matrix is not initialized at this point.
            for (k = 0; k < a_cols; k++) {
                c[i][e] += a[i][k] * b[k][e];
            }
        }
    }
    return c;
}

//************************************************************************
double** transposeMatrix(
        double** a,
        const uint32_t a_rows,
        const uint32_t a_cols) {
    //allocate memory for transposed matrix
    double ** n = createMatrix(a_cols, a_rows);
    if ( n==NULL){
        return n;
    }

    if (a_cols == 0 || a_rows ==0 ){
        return NULL;
    }
    uint32_t x = 0;
    while (x<a_rows){
        uint32_t j = 0;
        while (j<a_cols){
            n[j][x] = a[x][j];
            j++;
        }
        x++;
    }
    return n;
}

