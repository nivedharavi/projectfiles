int isOK(int row, int col) {
    if ((row>=0&&row<MATRIX_SIZE)&&(col>=0&&col<MATRIX_SIZE)){
        return 1;
    }
    else{
        return 0;
    }
}

int seePath(int row, int col){
    if (maze[row][col]==1){ //if spot is a wall
        return 0;
    }
    else if (maze[row][col]==2){ //if spot already has a breadcrumb
        return 0;
    }
    else if (!(isOK(row,col))) return 0;
    if (maze[row][col+1] >=1&&
        maze[row][col-1]>=1&&
        maze[row-1][col]>=1&& //checks all the spots around
        maze[row+1][col]>=1){
        return 0; //cannot go this way, right hand on wall
    }
    else {maze[row][col] =2; //doesnt have any road blocks - drop a break crumb and return successfully
        return 1;};
}


int checkLast(int col){
    int row=MATRIX_SIZE-1;
    if (maze[row][col]==0){
        return 1;
    }
       else if(col==MATRIX_SIZE-1){
            return 0;
        }

    else{
        checkLast(col+1);
    }
}
int solveMazeRec(int row, int col) {
    if(!checkLast(0)) return 0;
	else if(row==MATRIX_SIZE-1&& maze[row][col]==0){ // base case, reached the end
        maze[row][col] = 2;
        return 1;
    }
    else if(!seePath(row,col)) return 0;//check all possible road blocks
    int p1 = solveMazeRec(row,col+1); //call see path on every point around the starting point
    int p2 = solveMazeRec(row, col-1);
    int p3 = solveMazeRec(row+1, col); //gets to the last row
    if (p3==1) return 1; //will return 1 from the base case
    int p4 = solveMazeRec(row-1, col);
    if(p1==0&&p2==0&&p3==0&&p4==0){//none of them are successful
        maze[row][col] =0;//bread crumb clean up
        return 0;
    }
    else{
        return 1;
    }
}

int calcTot(Martian newMartian ){
    int tot = 0;
    tot+=newMartian.dodeks;
    tot+=newMartian.nicks;
    tot+=newMartian.pennies;
    return tot;
}

int calcCents (Martian newMartian,int cents){
    cents-=12*newMartian.dodeks;
    cents-=5*newMartian.nicks;
    cents-=1*newMartian.pennies;
    return cents;
}

Martian makeNew(Martian x, Martian y){
    Martian z;
    z.dodeks=x.dodeks+y.dodeks;
    z.nicks  = x.nicks+y.nicks;
    z.pennies = x.pennies+y.pennies;
    return z;
}

Martian change(int cents) {
Martian best;
    int currtot = 0;
   best.dodeks = 0;
    best.nicks=0;
  best.pennies=0;
    if(cents == 0){//base case
        return best;
    }
    int currchange = 0;
    if (cents>=12){
        Martian M1;
        M1.dodeks=1; M1.nicks=0; M1.pennies = 0; // set 1 for dodeks
        currchange=calcCents(M1, cents); //calculate remaining change
        M1 = makeNew(M1,change(currchange)); //recursively call change until cents becomes 0, then add them together
        int m1coins = calcTot(M1);//calculate all the coins in the struct
        currtot = m1coins; // set global variable to this value until the rest are calculated
        best = M1;
    }

    if (cents>=5){
        Martian M2;
        M2.dodeks=0; M2.nicks=1; M2.pennies=0;
        currchange = calcCents(M2,cents);
        M2 = makeNew(M2, change(currchange));
        int m2coins = calcTot(M2);
        if(currtot==0||m2coins<currtot){
            currtot=m2coins;
            best = M2;
        }

    }

    if(cents>=1){
        Martian M3;
        M3.dodeks=0; M3.nicks=0; M3.pennies=1;
        currchange=calcCents(M3, cents);
        M3 = makeNew(M3, change(currchange));
        int m3coins = calcTot(M3);
        if (currtot==0||m3coins<currtot){
            currtot = m3coins;
            best = M3;
        }
    }

return best;

}


int calcCents2 (Martian newMartian,int cents, int nick_val, int dodek_val){
    cents-=dodek_val*newMartian.dodeks;
    cents-=nick_val*newMartian.nicks;
    cents-=1*newMartian.pennies;
    return cents;
}
Martian change(int cents, int nick_val, int dodek_val) {
	Martian small;
    small.dodeks=0;
    small.nicks=0;
    small.pennies=0;


    if(cents==0){
        return small;
    }

    int min = 0;
    if (cents>=dodek_val){
        Martian m1;
        m1.dodeks=1; m1.nicks=0;m1.pennies=0;
        int curr =  calcCents2(m1, cents,nick_val,dodek_val);
        m1 = makeNew(m1, change(curr,nick_val,dodek_val));
        int tot = calcTot(m1);
        min = tot;
        small = m1;
    }
    if (cents>=nick_val){
        Martian m2;
        m2.dodeks=0; m2.nicks=1; m2.pennies=0;
       int curr = calcCents2(m2,cents,nick_val,dodek_val);
        m2=makeNew(m2, change(curr,nick_val,dodek_val));
        int tot1=calcTot(m2);
        if (min==0|| tot1<min){
            min  = tot1;
            small = m2;
        }
    }
    if (cents>=1){
        Martian m3;
        m3.dodeks=0;m3.nicks=0;m3.pennies=1;
        int curr = calcCents2(m3,cents, nick_val,dodek_val);
        m3 = makeNew(m3,change(curr,nick_val,dodek_val));
        int tot2 = calcTot(m3);
        if (min==0||tot2<min){
            min = tot2;
            small = m3;
        }
    }
    return small;
}
